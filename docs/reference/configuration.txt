.. _configuration:

*************
Configuration
*************

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Mongoid is customarily configured through a ``mongoid.yml`` file that specifies
options and clients. The simplest configuration is as follows, which configures
Mongoid to talk to a MongoDB server at "localhost:27017" and use the database
named "mongoid".

.. code-block:: yaml

  development:
    clients:
      default:
        database: mongoid
        hosts:
          - localhost:27017

The top level key in the configuration file, ``development`` in the above
example, refers to the environment name which the application is executing in,
i.e. ``development``, ``test`` or ``production``. The third level key,
``default`` in the above example, refers to the Mongo client name.
Most applications will use a single client named ``default``.


Generating Default Configuration
================================

If you are using Ruby on Rails, you can have Mongoid generate a default
configuration file for you by running the following command:

.. code-block:: bash

  rails g mongoid:config

The configuration file will be placed in ``config/mongoid.yml``. An
initializer will also be created and placed in
``config/initializers/mongoid.rb``. It is recommended that all configuration
be specified in ``config/mongoid.yml``, but if you prefer, the ``mongoid.rb``
initializer may also be used to set configuration options. Note, though, that
settings in ``mongoid.yml`` always take precedence over settings in the
initializer.

If you are not using Ruby on Rails, you can copy the minimal configuration
given above and save it as ``config/mongoid.yml``.


Loading Mongoid Configuration
=============================

If you are using Ruby on Rails, Mongoid configuration is automatically loaded
for the current environment as stored in ``Rails.env`` when the application
loads.

You may need to configure the ORM for your application to be Mongoid by
adding the following to ``application.rb``:

.. code-block:: ruby

  config.generators do |g|
    g.orm :mongoid
  end

If you are not using Ruby on Rails, Mongoid configuration must be loaded
manually. This can be done via the ``Mongoid.load!`` method, which takes
the configuration file path as its argument, as follows:

.. code-block:: ruby

  # Use automatically detected environment name
  Mongoid.load!("path/to/your/mongoid.yml")

  # Specify environment name manually
  Mongoid.load!("path/to/your/mongoid.yml", :production)

When Mongoid is asked to automatically detect the environment name,
it does so by examining the following sources, in order:

- If ``Rails`` top level constant is defined, ``Rails.env``.
- If ``Sinatra`` top level constant is defined, ``Sinatra::Base.environment``.
- The ``RACK_ENV`` environment variable.
- The ``MONGOID_ENV`` environment variable.

It is also possible to configure Mongoid directly in Ruby, without using
a configuration file. This configuration style does not support the concept
of environments - whatever configuration is provided, it is applied to the
current environment - but it does support defining multiple clients.

.. code-block:: ruby

  Mongoid.configure do |config|
    config.clients.default = {
      hosts: ['localhost:27017'],
      database: 'my_db',
    }

    config.log_level = :warn
  end

.. note::

  Mongoid must be configured *before* any component of it is used or referenced.
  Once a component is used or referenced, changing configuration may not apply
  changes to already instantiated components.


.. _configuration-options:

Mongoid Configuration Options
=============================

The following annotated example ``mongoid.yml`` demonstrates how Mongoid
can be configured.

Mongoid delegates to the Ruby driver for client configuration. Please review
`the driver documentation <https://mongodb.com/docs/ruby-driver/current/reference/create-client/>`_
for details on driver options.

.. code-block:: yaml

  development:
    # Configure available database clients. (required)
    clients:
      # Define the default client. (required)
      default:
        # A uri may be defined for a client:
        # uri: 'mongodb://user:password@myhost1.mydomain.com:27017/my_db'
        # Please see driver documentation for details. Alternatively, you can
        # define the following:
        #
        # Define the name of the default database that Mongoid can connect to.
        # (required).
        database: my_db
        # Provide the hosts the default client can connect to. Must be an array
        # of host:port pairs. (required)
        hosts:
          - myhost1.mydomain.com:27017
          - myhost2.mydomain.com:27017
          - myhost3.mydomain.com:27017
        options:
          # These options are Ruby driver options, documented in
          # https://mongodb.com/docs/ruby-driver/current/reference/create-client/

          # Change the default write concern. (default = { w: 1 })
          write:
            w: 1

          # Change the default read preference. Valid options for mode are: :secondary,
          # :secondary_preferred, :primary, :primary_preferred, :nearest
          # (default: primary)
          read:
            mode: :secondary_preferred
            tag_sets:
              - use: web

          # The name of the user for authentication.
          user: 'user'

          # The password of the user for authentication.
          password: 'password'

          # The user's database roles.
          roles:
            - 'dbOwner'

          # Change the default authentication mechanism. Please see the
          # driver documentation linked above for details on how to configure
          # authentication. Valid options are :aws, :gssapi, :mongodb_cr,
          # :mongodb_x509, :plain, :scram and :scram256 (default on 3.0
          # and higher servers is :scram, default on 2.6 servers is :plain)
          auth_mech: :scram

          # Specify the auth source, i.e. the database or other source which
          # contains the user's login credentials. Allowed values for auth source
          # depend on the authentication mechanism, as explained in the server documentation:
          # https://mongodb.com/docs/manual/reference/connection-string/#mongodb-urioption-urioption.authSource
          # If no auth source is specified, the default auth source as
          # determined by the driver will be used. Please refer to:
          # https://mongodb.com/docs/ruby-driver/current/reference/authentication/#auth-source
          auth_source: admin

          # Connect directly to and perform all operations on the specified
          # server, bypassing replica set node discovery and monitoring.
          # Exactly one host address must be specified. (default: false)
          #direct_connection: true

          # Deprecated. Force the driver to connect in a specific way instead
          # of automatically discovering the deployment type and connecting
          # accordingly. To connect directly to a replica set node bypassing
          # node discovery and monitoring, use direct_connection: true instead
          # of this option. Possible values: :direct, :replica_set, :sharded.
          # (default: none)
          #connect: :direct

          # Change the default time in seconds the server monitors refresh their status
          # via hello commands. (default: 10)
          heartbeat_frequency: 10

          # The time in seconds for selecting servers for a near read preference. (default: 0.015)
          local_threshold: 0.015

          # The timeout in seconds for selecting a server for an operation. (default: 30)
          server_selection_timeout: 30

          # The maximum number of connections in the connection pool. (default: 5)
          max_pool_size: 5

          # The minimum number of connections in the connection pool. (default: 1)
          min_pool_size: 1

          # The time to wait, in seconds, in the connection pool for a connection
          # to be checked in before timing out. (default: 1)
          wait_queue_timeout: 1

          # The time to wait to establish a connection before timing out, in seconds.
          # (default: 10)
          connect_timeout: 10

          # How long to wait for a response for each operation sent to the
          # server. This timeout should be set to a value larger than the
          # processing time for the longest operation that will be executed
          # by the application. Note that this is a client-side timeout;
          # the server may continue executing an operation after the client
          # aborts it with the SocketTimeout exception.
          # (default: nil, meaning no timeout)
          socket_timeout: 5

          # The name of the replica set to connect to. Servers provided as seeds that do
          # not belong to this replica set will be ignored.
          replica_set: my_replica_set

          # Whether to connect to the servers via ssl. (default: false)
          ssl: true

          # The certificate file used to identify the connection against MongoDB.
          ssl_cert: /path/to/my.cert

          # The private keyfile used to identify the connection against MongoDB.
          # Note that even if the key is stored in the same file as the certificate,
          # both need to be explicitly specified.
          ssl_key: /path/to/my.key

          # A passphrase for the private key.
          ssl_key_pass_phrase: password

          # Whether or not to do peer certification validation. (default: true)
          ssl_verify: true

          # The file containing a set of concatenated certification authority certifications
          # used to validate certs passed from the other end of the connection.
          ssl_ca_cert: /path/to/ca.cert

          # Compressors to use. (default is to not use compression)
          compressors: [zlib]

    # Configure Mongoid-specific options. (optional)
    options:
      # Application name that is printed to the MongoDB logs upon establishing
      # a connection in server versions 3.4 or greater. Note that the name
      # cannot exceed 128 bytes in length. It is also used as the database name
      # if the database name is not explicitly defined. (default: nil)
      app_name: MyApplicationName

      # Type of executor for queries scheduled using ``load_async`` method.
      #
      # There are two possible values for this option:
      #
      #   - :immediate - Queries will be immediately executed on a current thread.
      #       This is the default option.
      #   - :global_thread_pool - Queries will be executed asynchronously in
      #       background using a thread pool.
      #async_query_executor: :immediate

      # Mark belongs_to associations as required by default, so that saving a
      # model with a missing belongs_to association will trigger a validation
      # error. (default: true)
      belongs_to_required_by_default: true

      # Set the global discriminator key. (default: "_type")
      discriminator_key: "_type"

      # Raise an exception when a field is redefined. (default: false)
      duplicate_fields_exception: false

      # Defines how many asynchronous queries can be executed concurrently.
      # This option should be set only if `async_query_executor` option is set
      # to `:global_thread_pool`.
      #global_executor_concurrency: nil

      # Include the root model name in json serialization. (default: false)
      include_root_in_json: false

      # Include the _type field in serialization. (default: false)
      include_type_for_serialization: false

      # Whether to join nested persistence contexts for atomic operations
      # to parent contexts by default. (default: false)
      join_contexts: false

      # When this flag is false, a document will become read-only only once the
      # #readonly! method is called, and an error will be raised on attempting
      # to save or update such documents, instead of just on delete. When this
      # flag is true, a document is only read-only if it has been projected
      # using #only or #without, and read-only documents will not be
      # deletable/destroyable, but will be savable/updatable.
      # When this feature flag is turned on, the read-only state will be reset on
      # reload, but when it is turned off, it won't be.
      # (default: false)
      #legacy_readonly: true

      # Set the Mongoid and Ruby driver log levels when Mongoid is not using
      # Ruby on Rails logger instance. (default: :info)
      log_level: :info

      # When using the BigDecimal field type, store the value in the database
      # as a BSON::Decimal128 instead of a string. (default: true)
      #map_big_decimal_to_decimal128: true

      # Preload all models in development, needed when models use
      # inheritance. (default: false)
      preload_models: false

      # Raise an error when performing a #find and the document is not found.
      # (default: true)
      raise_not_found_error: true

      # Raise an error when defining a scope with the same name as an
      # existing method. (default: false)
      scope_overwrite_exception: false

      # Return stored times as UTC. See the time zone section below for
      # further information. Most applications should not use this option.
      # (default: false)
      use_utc: false

      # (Deprecated) In MongoDB 4.0 and earlier, set whether to create
      # indexes in the background by default. (default: false)
      background_indexing: false

    # Configure driver-specific options. (optional)
    driver_options:
      # When this flag is turned off, inline options will be correctly
      # propagated to Mongoid and Driver finder methods. When this flag is turned
      # on those options will be ignored. For example, with this flag turned
      # off, Band.all.limit(1).count will take the limit into account, while
      # when this flag is turned on, that limit is ignored. The affected driver
      # methods are: aggregate, count, count_documents, distinct, and
      # estimated_document_count. The corresponding Mongoid methods are also
      # affected. (default: false, driver version: 2.18.0+)
      #broken_view_options: false

      # Validates that there are no atomic operators (those that start with $)
      # in the root of a replacement document, and that there are only atomic
      # operators at the root of an update document. If this feature flag is on,
      # an error will be raised on an invalid update or replacement document,
      # if not, a warning will be output to the logs. This flag does not affect
      # Mongoid as of 8.0, but will affect calls to driver update/replace
      # methods. (default: false, driver version: 2.18.0+)
      #validate_update_replace: false


.. _load-defaults:

Version Based Defaults
======================

Mongoid supports setting the configuration options to the defaults for specific
versions. This is useful for upgrading to a new Mongoid version. When upgrading
your Mongoid version, the following should be set on ``Mongoid::Config``:

.. code:: ruby

  Mongoid.configure do |config|
    config.load_defaults <OLD VERSION>
  end

This way, when upgrading to a new version of Mongoid, your code will run with
the configuration options from the previous version of Mongoid. Then,
one-by-one, you can change the feature flags for the new version, and test that
your code still acts as expected. Once all of the new feature flags have been
accounted for, the call to ``load_defaults`` may be changed to take in the *new*
version, and all of the changed feature flags may be removed.

For example, suppose we're upgrading from 7.5 to 8.0. Between these two versions,
two feature flags were added: ``legacy_attributes`` and ``map_big_decimal_to_decimal128``.
Before upgrading to Mongoid 8, add the following to your ``Mongoid::Config``:

.. code:: ruby

  Mongoid.configure do |config|
    config.load_defaults 7.5
  end

After upgrading to Mongoid 8.0 in your ``Gemfile``, any feature flags will
remain set to their 7.5 default behavior: ``legacy_attributes: true,
map_big_decimal_to_decimal128: false``. You may then flip these feature flags
one-by-one to their 8.0 behavior:

.. code:: ruby

  Mongoid.configure do |config|
    config.load_defaults 7.5
    config.legacy_attributes = false
    # config.map_big_decimal_to_decimal128 = true
  end

We recommend do these one at a time, so in the example above we leave the
second flag commented out. After verifying your code works as expected with the
``legacy_attributes`` flag turned off, the ``map_big_decimal_to_decimal128``
setting can be uncommented. Once that functionality is verified as well, both
of those lines can be removed and the ``load_defaults`` replaced with:

.. code:: ruby

  Mongoid.configure do |config|
    config.load_defaults 8.0
  end


ERb Preprocessing
=================

When loading a configuration file, Mongoid processes it with ERb before
parsing it as YAML. This allows, for example, constructing the contents of
the configuration file at runtime based on environment variables:

.. code-block:: yaml

  development:
    clients:
      default:
        uri: "<%= ENV['MONGODB_URI'] %>"

.. note::

  When outputting values from ERb, ensure the values are valid YAML and
  escape them as needed.

.. note::

  Since ERb rendering is performed prior to YAML parsing, all ERb directives
  in the configuration file are evaluated, including those occurring in YAML
  comments.

Logging
=======

When configuring logging, it is important to keep in mind that Mongoid
provides a model layer on top of the MongoDB Ruby driver, and the driver
dispatches the CRUD operations to the MongoDB deployment. Therefore, some
of the logging output in an application using Mongoid comes from Mongoid
itself, and some comes from the driver.

The Mongo client is a Ruby driver client instance, therefore
the logger of a Mongo client is the Ruby driver logger, not the Mongoid
logger. In other words:

.. code-block:: ruby

  # Ruby driver logger, not Mongoid logger
  Mongoid.client(:default).logger

Depending on whether Mongoid is used in a Ruby on Rails application, and how
both Mongoid and Ruby driver are configured, they may use the same logger
instance or different instances, potentially with different configurations.

In Ruby on Rails Application
----------------------------

When used in a Ruby on Rails application, Mongoid by default inherits
the logger and the log level from Rails, and sets the driver's logger
to the same logger instance:

.. code-block:: ruby

  Rails.logger === Mongoid.logger
  # => true

  Mongoid.logger === Mongo::Logger.logger
  # => true

To change the log level, use `standard Rails configuration
<https://guides.rubyonrails.org/debugging_rails_applications.html#log-levels>`_.
Place the following in one of environment configuration files, such as
``config/environments/production.rb``:

.. code-block:: ruby

  Rails.application.configure do
    config.log_level = :debug
  end

.. note::

  The ``log_level`` Mongoid `configuration option <configuration-options>`_
  is not used when Mongoid operates in a Rails application, because Mongoid
  inherits Rails' log level in this case.

To configure either Mongoid or driver logger differently from the Rails logger,
use an initializer as follows:

.. code-block:: ruby

  Rails.application.configure do
    config.after_initialize do
      # Change Mongoid log destination and/or level
      Mongoid.logger = Logger.new(STDERR).tap do |logger|
        logger.level = Logger::DEBUG
      end

      # Change driver log destination and/or level
      Mongo::Logger.logger = Logger.new(STDERR).tap do |logger|
        logger.level = Logger::DEBUG
      end
    end
  end

.. note::

  There is currently no provision in the Ruby standard library ``Logger``
  to return the log device (i.e. the ``IO`` object) that a logger is using.
  To have, for example, Mongoid and/or the Ruby driver log to the
  standard Rails log file (e.g. ``log/development.log``) but with a
  different level from standard Rails logger (``Rails.logger``), the
  file must be opened separately and the resulting ``IO`` object passed to
  the ``Logger`` constructor.

.. note::

  Since by default Mongoid sets its own logger and the driver's logger to the
  same instance as the Rails logger, modifying any of the instances affects
  all of them. For example the following changes log level for all three
  loggers, unless the application assigned a separate ``Logger`` instance
  to ``Mongo::Logger.logger`` as described above:

  .. code-block:: ruby

    Mongoid::Logger.logger.level = Logger::DEBUG

Standalone
----------

When not loaded in a Ruby on Rails application, Mongoid respects the
``log_level`` top level `configuration option <configuration-options>`_.
It can be given in the configuration file as follows:

.. code-block:: yaml

  development:
    clients:
      default:
        # ...
    options:
      log_level: :debug

... or when configuring Mongoid inline:

.. code-block:: ruby

  Mongoid.configure do |config|
    config.log_level = :debug
  end

The default log destination in Mongoid 7.1 and higher is standard error.
The default log destination in Mongoid 7.0 and lower is standard output.
To change the log destination, create a new logger instance as follows:

.. code-block:: ruby

  Mongoid.logger = Logger.new(STDERR).tap do |logger|
    logger.level = Logger::DEBUG
  end

To change the Ruby driver log level or destination:

.. code-block:: ruby

  Mongo::Logger.logger = Logger.new(STDERR).tap do |logger|
    logger.level = Logger::DEBUG
  end

To set the driver logger to be the same as the Mongoid logger:

.. code-block:: ruby

  Mongo::Logger.logger = Mongoid.logger

.. note::

  Mongoid does not alter the driver's logger when running in
  standalone mode.

.. _time-zones:

Time Zones
==========

Mongoid uses ActiveSupport's time zone functionality, which is far
more robust than Ruby's standard library. Importantly, ActiveSupport
allows configuration of ``Time.zone``, a thread-global variable which
provides context for working with date and time values.

While a thorough treatment of time zones in Ruby is outside the scope
of this tutorial, the easiest and most reliable way of achieving correct
time zone handling is as follows:

1. Set the operating system's time zone to UTC. For example, on Linux:

.. code-block:: bash

  cp /usr/share/zoneinfo/UTC /etc/localtime

2. Set your application default time zone to UTC:

.. code-block:: ruby

  # If using Rails, in application.rb:
  class Application < Rails::Application
    config.time_zone = 'UTC'
  end

  # If not using Rails:
  Time.zone = 'UTC'

3. In each controller and job class, set the appropriate time zone in a
   ``before_filter`` at the earliest possible stage. As an example,
   if each user of your application can set their own time zone,
   you may wish to do:

.. code-block:: ruby

  class ApplicationController < ActionController::Base
    before_filter :fetch_user,
                  :set_time_zone

    def set_time_zone
      Time.zone = @user.time_zone
    end
  end

4. From here, you may work with times naturally in the local time zone.
   For example, in a view:

.. code-block:: ruby

  Turned into a pumpkin after <%= cinderella.updated_at.seconds_after_midnight %> seconds!

5. Use ActiveSupport methods instead of the Ruby standard library.

   - ``Time.zone.now`` or ``Time.current` instead of ``Time.now``
   - ``Date.current`` instead of ``Date.today``

   Critically, note that the latter Ruby standard library methods reference
   your system time zone (e.g. UTC) and not the value of ``Time.zone``.
   As it is very easy to mistake these similarly named methods, we recommend to
   use `Rubocop's Rails/TimeZone cop
   <https://docs.rubocop.org/rubocop-rails/cops_rails.html#railstimezone>`_ in your CI.

Setting time zone on data loaded from MongoDB
---------------------------------------------

MongoDB stores all times in UTC without time zone information.
Mongoid models load and returns time values as instances of
``ActiveSupport::TimeWithZone``. You may set the ``use_utc`` option
to control how Mongoid sets the time zone when loading from the database:

- If false (default), Mongoid will use ``Time.zone`` to set the time
  zone of time values are loaded from database.
- If true, Mongoid will always set the time zone as UTC on loaded
  time values.

``use_utc`` only affects how data is loaded, and does not affect
how data is persisted. For example, if you assign a ``Time`` or
``ActiveSupport::TimeWithZone`` instance to a time field, the time
zone information of the assigned instance always will be used
irrespective of the ``use_utc`` setting. Alternatively, if you
assign a string value to a time field, any time zone information
in the string will be used if present. If the string does not include
time zone information it will be parsed according to ``Time.zone``.
To illustrate:

.. code-block:: ruby

  Time.use_zone("Asia/Kolkata") do

    # String does not include time zone, so "Asia/Kolkata" will be used
    ghandi.born_at = "1869-10-02 7:10 PM"

    # Time zone in string (-0600) will be used
    amelia.born_at = "1897-07-24 11:30 -0600"
  end


Configuring ``SSLContext``
==========================
It may be desirable to further configure TLS options in your application, for
example by enabling or disabling certain ciphers.

This can be done by setting TLS context hooks on the Ruby driver -- TLS context
hooks are user-provided ``Proc``s that will be invoked before any TLS socket
connection in the driver and can be used to modify the underlying
``OpenSSL::SSL::SSLContext`` object used by the socket.

To set TLS context hooks, add ``Proc``s to the ``Mongo.tls_context_hooks``
array. This can be done in an initializer. The example below adds a hook
that only enables the "AES256-SHA" cipher.

.. code-block:: ruby

  Mongo.tls_context_hooks.push(
    Proc.new { |context|
      context.ciphers = ["AES256-SHA"]
    }
  )

  # Only the AES256-SHA cipher will be enabled from this point forward

Every ``Proc`` in ``Mongo.tls_context_hooks`` will be passed an
``OpenSSL::SSL::SSLContext`` object as its sole argument. These procs will
be executed sequentially during socket creation.

.. warning::

  TLS context hooks are global and will affect all ``Mongo::Client`` instances
  in an application.

For more information about TLS context hooks, including best practices for
assigning and removing them, see `the Ruby driver documentation <https://mongodb.com/docs/ruby-driver/current/reference/create-client/#modifying-sslcontext>`_.


Client-Side Encryption
======================

When loading the configuration file, Mongoid permits the file to contain
``BSON::Binary`` instances which are used for specifying ``keyId`` in
the schema map for `client-side encryption
<https://www.mongodb.com/docs/ruby-driver/current/reference/client-side-encryption/>`_,
as the following example shows:

.. code-block:: yaml

  development:
    clients:
      default:
        database: blog_development
        hosts: [localhost:27017]
        options:
          auto_encryption_options:
            key_vault_namespace: 'keyvault.datakeys'
            kms_providers:
              local:
                key: "z7iYiYKLuYymEWtk4kfny1ESBwwFdA58qMqff96A8ghiOcIK75lJGPUIocku8LOFjQuEgeIP4xlln3s7r93FV9J5sAE7zg8U"
            schema_map:
              blog_development.comments:
                properties:
                  message:
                    encrypt:
                      keyId:
                        - !ruby/object:BSON::Binary
                          data: !binary |-
                            R/AgNcxASFiiJWKXqWGo5w==
                          type: :uuid
                      bsonType: "string"
                      algorithm: "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
                bsonType: "object"


Usage with Forking Servers
==========================

When using Mongoid with a forking web server such as Puma, Unicorn or
Passenger, it is recommended to not perform any operations on Mongoid models
in the parent process prior to the fork.

When a process forks, Ruby threads are not transferred to the child processes
and the Ruby driver Client objects lose their background monitoring. The
application will typically seem to work just fine until the deployment
state changes (for example due to network errors, a maintenance event) at
which point the application is likely to start getting ``NoServerAvailable``
exception when performing MongoDB operations.

If the parent process needs to perform operations on the MongoDB database,
reset all clients in the workers after they forked. How to do so depends
on the web server being used.

If the parent process does not need to perform operations on the MongoDB
database after child processes are forked, close the clients in the parent
prior to forking children. If the parent process performs operations on a Mongo
client and does not close it, the parent process will continue consuming a
connection slot in the cluster and will continue monitoring the cluster for
as long as the parent remains alive.

.. note::

  The close/reconnect pattern described here should be used with Ruby driver
  version 2.6.2 or higher. Previous driver versions did not recreate
  monitoring threads when reconnecting.

Puma
----

Use the ``on_worker_boot`` hook to reconnect clients in the workers and
the ``before_fork`` hook to close clients in the parent process
(`Puma documentation <https://puma.io/puma/>`_):

.. code-block:: ruby

  on_worker_boot do
    if defined?(Mongoid)
      Mongoid::Clients.clients.each do |name, client|
        client.close
        client.reconnect
      end
    else
      raise "Mongoid is not loaded. You may have forgotten to enable app preloading."
    end
  end

  before_fork do
    if defined?(Mongoid)
      Mongoid.disconnect_clients
    end
  end

Unicorn
-------

Use the ``after_fork`` hook to reconnect clients in the workers and
the ``before_fork`` hook to close clients in the parent process
(`Unicorn documentation <https://yhbt.net/unicorn/Unicorn/Configurator.html>`_):

.. code-block:: ruby

  after_fork do |server, worker|
    if defined?(Mongoid)
      Mongoid::Clients.clients.each do |name, client|
        client.close
        client.reconnect
      end
    else
      raise "Mongoid is not loaded. You may have forgotten to enable app preloading."
    end
  end

  before_fork do |server, worker|
    if defined?(Mongoid)
      Mongoid.disconnect_clients
    end
  end

Passenger
---------

Use the ``starting_worker_process`` hook to reconnect clients in the workers
(`Passenger documentation
<https://www.phusionpassenger.com/library/indepth/ruby/spawn_methods/#unintentional-file-descriptor-sharing>`_).
Passenger does not appear to have a hook that is invoked in the parent process
before the workers are forked.

.. code-block:: ruby

  if defined?(PhusionPassenger)
    PhusionPassenger.on_event(:starting_worker_process) do |forked|
      if forked
        Mongoid::Clients.clients.each do |name, client|
          client.close
          client.reconnect
        end
      end
    end
  end


.. _query-cache-middleware:

Query Cache Middleware
======================

.. note::

  When used with Ruby driver version 2.15 or newer, Mongoid's Query Cache
  Middleware delegates to `the driver's Query Cache Middleware
  <https://www.mongodb.com/docs/ruby-driver/current/reference/query-cache/index.html#query-cache-middleware>`_.

Mongoid provides a Rack middleware which enables the :ref:`Query Cache
<query-cache>` for the duration of each web request. Below is an example of
how to enable the Query Cache Middleware in a Ruby on Rails application:

.. code-block:: ruby

  # config/application.rb

  # Add Mongo::QueryCache::Middleware at the bottom of the middleware stack
  # or before other middleware that queries MongoDB.
  config.middleware.use Mongo::QueryCache::Middleware

Please refer to the `Rails on Rack guide
<https://guides.rubyonrails.org/rails_on_rack.html#configuring-middleware-stack>`_
for more information about using Rack middleware in Rails applications.


Development Configuration
=========================

Driver's default configuration is suitable for production deployment.
In development, some settings can be adjusted to provide a better developer
experience.

- ``:server_selection_timeout``: set this to a low value (e.g., ``1``)
  if your MongoDB server is running locally and you start it manually. A low
  server selection timeout will cause the driver to fail quickly when there is
  no server running.

Sample recommended development configuration:

.. code-block:: yaml

  development:
    clients:
      default:
        database: mongoid
        hosts:
          - localhost:27017
        options:
          server_selection_timeout: 1
