***********
Mongoid 7.4
***********

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

This page describes significant changes and improvements in Mongoid 7.4.
The complete list of releases is available `on GitHub
<https://github.com/mongodb/mongoid/releases>`_ and `in JIRA
<https://jira.mongodb.org/projects/MONGOID?selectedItem=com.atlassian.jira.jira-projects-plugin:release-page>`_;
please consult GitHub releases for detailed release notes and JIRA for
the complete list of issues fixed in each release, including bug fixes.

All behavior changes in Mongoid 7.4 must be explicitly requested by changing
the value of configuration options as detailed below. By default,
Mongoid 7.4 behaves the same as Mongoid 7.3.


Ruby Version Support
--------------------

As of version 7.4, Mongoid supports Ruby 2.5+.
Support for Ruby 2.4 and earlier has been dropped.


Change ``===`` Operator To Match Ruby Semantics
-----------------------------------------------

In Mongoid 7.4, the ``===`` operator on ``Mongoid::Document`` classes and
instances can be configured to behave the same way as it does in Ruby,
and is equivalent to calling ``is_a?`` on the right hand
side with the left hand side as the argument:

.. code-block:: ruby

  ModelClass === instance

  # equivalent to:
  instance.is_a?(ModelClass)

In order to get this functionality, the ``Mongoid.legacy_triple_equals``
option must be set to false. If it is set to true, which is the default for
Mongoid 7.4, the ``===`` operator will function as it did in Mongoid 7.3:
``===`` returned ``true`` for some cases when the equivalent Ruby
``===`` implementation returned false, as per the examples below.

Mongoid 7.4 behavior:

.. code-block:: ruby

  class Band
    include Mongoid::Document
  end

  class CoverBand < Band
  end

  band = Band.new
  cover_band = CoverBand.new

  band === Band
  # => false

  cover_band === Band
  # => false

  Band === Band
  # => false

  CoverBand === Band
  # => false

Mongoid 7.3 behavior:

.. code-block:: ruby

  band === Band
  # => true

  cover_band === Band
  # => true

  Band === Band
  # => true

  CoverBand === Band
  # => true

The standard invocation of ``===``, that is having the class on the left and
the instance on the right, works the same in Mongoid 7.4 as it did previously
and matches the core Ruby behavior:

.. code-block:: ruby

  Band === band
  # => true

  Band === cover_band
  # => true

.. note::

  The value of ``Mongoid.legacy_triple_equals`` option will change to ``false``
  by default in Mongoid 8.0.


Return Hexadecimal ``_id`` Value from ``BSON::ObjectId#as_json``
----------------------------------------------------------------

Mongoid 7.4 permits configuring the ``BSON::ObjectId#as_json`` method
to return the ``_id`` value as a hexadecimal string instead of the
``{"$oid" => "..."}`` hash it has returned in Mongoid 7.3 and previous
versions.

When ``Mongoid.object_id_as_json_oid`` is set to ``false``, Mongoid will
delegate to ``bson-ruby`` implementation of ``BSON::ObjectId#as_json``.
In ``bson-ruby`` 4 the ``BSON::ObjectId#as_json`` method will continue
to return the hash ``{"$oid" => "..."}`` for backwards compatibility, but
in ``bson-ruby`` 5 the ``BSON::ObjectId#as_json`` method will return only
the hexadecimal ObjectId string.

When ``Mongoid.object_id_as_json_oid`` is set to ``true``, Mongoid will
install an implementation of ``BSON::ObjectId#as_json`` which returns
the hash ``{"$oid" => "..."}`` as it did in Mongoid 7.3 and earlier.

The behavior of ``as_json`` is summarized in the following table:

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :class: compatibility-large no-padding

   * - ``Mongoid.object_id_as_json_oid`` value
     - true
     - false

   * - ``bson-ruby`` 4
     - ``{"$oid"=>"621ed7fda15d5d231594627c"}``
     - ``{"$oid"=>"621ed7fda15d5d231594627c"}``

   * - ``bson-ruby`` 5
     - ``{"$oid"=>"621ed7fda15d5d231594627c"}``
     - ``"621ed7fda15d5d231594627c"``


Scoped Associations
-------------------

Associations now support the ``:scope`` argument, yielding
:ref:`scoped associations <association-scope>`.


Respect Field Aliases In Embedded Documents When Using ``distinct`` And ``pluck`` 
---------------------------------------------------------------------------------

When ``distinct`` and ``pluck`` are used with aliased fields in embedded
documents, the aliases can be expanded if the ``Mongoid.broken_alias_handling``
option is set to ``false``. By default, for backwards compatibility, in
Mongoid 7.4 this option is set to true, yielding Mongoid 7.3 and earlier
behavior. Given the following definitions:

.. code-block:: ruby

  class Band
    include Mongoid::Document
    embeds_many :managers
  end

  class Manager
    include Mongoid::Document
    embedded_in :band

    field :name, as: :n
  end

Mongoid 7.4 behavior with ``Mongoid.broken_alias_handling`` set to ``false``:

.. code-block:: ruby

  # Expands out to "managers.name" in the query:
  Band.distinct('managers.n')
  Band.pluck('managers.n')

Mongoid 7.3 and 7.4 with ``Mongoid.broken_alias_handling`` set to ``true`` behavior:

.. code-block:: ruby

  # Sends "managers.n" without expanding the alias:
  Band.distinct('managers.n')
  Band.pluck('managers.n')

.. note::

  The alias expansion for top-level fields has already been done by Mongoid 7.3.

.. note::

  The value of ``Mongoid.broken_alias_handling`` option will change to ``false``
  by default in Mongoid 8.0.


``count``, ``sum``, ``avg``, ``min``, ``max`` Ignore Sort If Not Limiting/Skipping
----------------------------------------------------------------------------------

The ``count``, ``sum``, ``avg``, ``min`` and ``max`` methods now omit the
sort stage from the generated aggregation pipeline if no skip or limit
is specified, because the results aren't affected by the sort order.
Example call that will now omit the sort stage and would potentially use
an index where it wouldn't before:

.. code-block:: ruby

  Band.desc(:name).count
