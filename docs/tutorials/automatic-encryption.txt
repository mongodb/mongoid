********************************************
Automatic Client-Side Field Level Encryption
********************************************

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Since version 4.2 MongoDB supports Client-Side Field Level Encryption
(CSFLE). This is a feature that enables you to encrypt data in your application
before you send it over the network to MongoDB. With CSFLE enabled, no MongoDB
product has access to your data in an unencrypted form.

You can set up CSFLE using the following mechanisms:

* Automatic Encryption: Enables you to perform encrypted read and write
  operations without you having to write code to specify how to encrypt fields.
* Explicit Encryption: Enables you to perform encrypted read and write
  operations through your MongoDB driver's encryption library. You must specify
  the logic for encryption with this library throughout your application.

Starting from version 9.0 Mongoid supports automatic CSFLE feature. This tutorial
walks you through the process of setting up and using CSFLE in Mongoid.

.. note::
  You can find more information about MongoDB CSFLE in
  `the server documentation. <https://www.mongodb.com/docs/manual/core/csfle/>`_

.. note::
  If you want to use explicit FLE, please follow `the Ruby driver documentation.
  <https://www.mongodb.com/docs/ruby-driver/current/reference/client-side-encryption/>`_


Installation
============

You can find the detailed description of how to install the necessary dependencies
in `the driver documentation. <https://www.mongodb.com/docs/ruby-driver/current/reference/client-side-encryption/#installation>`_
Here we provide just a brief summary of the required steps:

* Install ``libmongocrypt`` - either add `libmongocrypt-helper gem <https://github.com/mongodb/libmongocrypt-helper-ruby>`_ to
  your Gemfile, or download libmongocrypt release `here <https://s3.amazonaws.com/mciuploads/libmongocrypt/all/master/latest/libmongocrypt-all.tar.gz>`_,
  extract the version that matches your operating system, and set ``LIBMONGOCRYPT_PATH``
  environment variable accordingly.
* If you use the Ruby driver version 2.19 and above - install automatic
  encryption shared library. For installation instructions, see
  `the MongoDB manual <https://www.mongodb.com/docs/manual/core/queryable-encryption/reference/shared-library/#download-the-automatic-encryption-shared-library>`_.
* If you use an older version of the Ruby driver - install mongocryptd.
  Mongocryptd comes pre-packaged with enterprise builds of the MongoDB server
  (versions 4.2 and newer). For installation instructions, see the
  `MongoDB manual <https://mongodb.com/docs/manual/reference/security-client-side-encryption-appendix/#installation>`_.

Create a Customer Master Key
============================

A Customer Master Key (CMK) used to encrypt Data Encryption Keys. The easiest
way is to use a locally stored 96-bytes key. You can generate such a key
using the following Ruby code:

.. code-block:: ruby

  require 'securerandom'

  SecureRandom.hex(48) # => "f54ab...."

Later in this tutorial we assume that the Customer Master Key content is
available as ``CUSTOMER_MASTER_KEY`` environment variable.

.. warning::

  Using a local master key is insecure. It is recommended that you use a remote Key Management Service to create and
  store your master key. To do so, follow steps of the
  `"Set up a Remote Master Key" <https://www.mongodb.com/docs/manual/core/csfle/tutorials/#set-up-a-remote-master-key>`_
  in the MongoDB Client-Side Encryption documentation.

  For more information about creating a master key, see the
  `Create a Master Key <https://www.mongodb.com/docs/manual/core/csfle/#a.-create-a-master-key>`_
  section of the MongoDB manual.

Configure Clients
=================

Automatic CSFLE requires some additional configuration for the MongoDB client.
Assuming that your application has just one ``default`` client, you need to
add the following to your ``mongoid.yml``:

.. code-block:: yaml

  development:
    clients:
      default:
        uri: mongodb+srv://user:pass@yourcluster.mongodb.net/blog_development?retryWrites=true&w=majority
        options:
          auto_encryption_options: # This key enables automatic encryption
            key_vault_namespace: 'encryption.__keyVault' # Database and collection to store data keys
            kms_providers: # Tells the driver where to obtain master keys
              local: # We use the local key in this tutorial
                key: "<%= ENV['CUSTOMER_MASTER_KEY'] %>" # Key that we generated earlier
            extra_options:
                crypt_shared_lib_path: '/path/to/mongo_crypt_v1.so' # Only if you use the library


Create a Data Encryption Key
============================

A Data Encryption Key (DEK) is the key you use to encrypt the fields in your
MongoDB documents. You store your Data Encryption Key in your Key Vault
collection encrypted with your CMK.

To create a DEK in Mongoid you can use ``db:mongoid:encryption:create_data_key``
Rake task:

.. code-block:: sh

  % db:mongoid:encryption:create_data_key
  Created data key with id: 'KImyywsTQWi1+cFYIHdtlA==' for kms provider: 'local' in key vault: 'encryption.__keyVault'.

You can create multiple DEKs, if necessary.

.. code-block:: sh

  % db:mongoid:encryption:create_data_key
  Created data key with id: 'Vxr5m+5cQISjDOruzZgE0w==' for kms provider: 'local' in key vault: 'encryption.__keyVault'.


Configure Encryption Schema
===========================

Now we can tell Mongoid what should be encrypted:

.. code-block:: ruby

  class Patient
    include Mongoid::Document

    # Tells Mongoid what DEK should be used to encrypt fields of the document
    # and its embedded documents.
    encrypt_with key_id: 'KImyywsTQWi1+cFYIHdtlA=='

    # This field is not encrypted.
    field :category, type: String

    # This field is encrypted using AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic
    # algorithm.
    field :policy_number, type: Integer, encrypt: {
        deterministic: true
    }
    # This field is encrypted using AEAD_AES_256_CBC_HMAC_SHA_512-Random
    # algorithm.
    field :blood_type, type: String, encrypt: {
        deterministic: false
    }
    # This field is encrypted using AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic
    # algorithm and using  a different data key.
    field :ssn, type: Integer, encrypt: {
        deterministic: true, data_key_id: 'Vxr5m+5cQISjDOruzZgE0w=='
    }

    embeds_one :insurance
  end

  class Insurance
    include Mongoid::Document

    field :insurer, type: String

    # This field is encrypted using AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic
    # algorithm using the same data key as Patient class attributes.
    field :policy_number, type: Integer, encrypt: {
        deterministic: true
    }

    embedded_in :patient
  end

The configuration is complete. Now we can work with documents as usual:

.. code-block:: ruby

  Patient.create!(
    category: 'ER',
    policy_number: '123456',
    blood_type: 'AB+',
    ssn: '98765',
    insurance: Insurance.new(insurer: 'TK', policy_number: '123456')
  )
  # => #<Patient _id: 6446a0f746ebfd701f9f4290, category: "ER", policy_number: 123456, blood_type: "AB+", ssn: 98765>

  # Fields are encrypted automatically
  Patient.first!
  # => #<Patient _id: 6446a0f746ebfd701f9f4290, category: "ER", policy_number: 123456, blood_type: "AB+", ssn: 98765>

  # We can find documents by deterministically encrypted fields.
  Patient.where(ssn: '98765').to_a
  # => [#<Patient _id: 6446a1d046ebfd701f9f4292, category: "ER", policy_number: 123456, blood_type: "AB+", ssn: 98765>]

  # However, the actual content in the database is encrypted.
  unencrypted_client = Mongo::Client.new('mongodb://localhost:27017/crypto_development')
  unencrypted_client['patients'].find.first
  # =>
  # {"_id"=>BSON::ObjectId('6446a1d046ebfd701f9f4292'),
  # "category"=>"ER",
  # "policy_number"=><BSON::Binary:0x404080 type=ciphertext data=0x012889b2cb0b1341...>,
  # "blood_type"=><BSON::Binary:0x404560 type=ciphertext data=0x022889b2cb0b1341...>,
  # "ssn"=><BSON::Binary:0x405040 type=ciphertext data=0x012889b2cb0b1341...>,
  # "insurance"=>{"_id"=>BSON::ObjectId('6446a1d046ebfd701f9f4293'), "insurer"=>"TK", "policy_number"=><BSON::Binary:0x405920 type=ciphertext data=0x012889b2cb0b1341...>}}
