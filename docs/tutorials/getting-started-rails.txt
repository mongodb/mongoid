===========================
Getting Started (Rails App)
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

New Application
---------------

This section shows how to create a new Ruby on Rails application using Mongoid
for data access. The application will be similar to the blog application
described in the `Ruby on Rails Getting Started
<https://guides.rubyonrails.org/getting_started.html#creating-the-blog-application>`_
guide, however using Mongoid instead of ActiveRecord as the database adapter.


Install ``rails``
*****************

We will use a Rails generator to create the application skeleton.
In order to do so, he first step is to install the ``rails`` gem:

.. code-block:: sh

    gem install rails -v '~> 6.0.0'


Create New Application
**********************

Use the ``rails`` command to create the application skeleton, as follows:

.. code-block:: sh

    rails new blog --skip-active-record --skip-bundle
    cd blog

We pass ``--skip-active-record`` to request that ActiveRecord is not added
as a dependency, because we will be using Mongoid instead. Additionaly
we pass ``--skip-bundle`` because we'll be modifying the ``Gemfile`` to
add the ``mongoid`` dependency.

If you intend to test your application with RSpec, you can instruct the
generator to omit default Rails test setup by passing ``--skip-test``
and ``--skip-system-test`` options:

.. code-block:: sh

    rails new blog --skip-bundle --skip-active-record --skip-test --skip-system-test
    cd blog


Create Git Repo
***************

While not required, we recommend creating a Git repository for your application:

.. code-block:: sh

    git init .
    git add .
    git commit

Commit your changes as you are following this tutorial.


Add Mongoid
***********

1. Modify the ``Gemfile`` to add a reference to the
`mongoid <https://rubygems.org/gems/mongoid/>`_ gem:

.. code-block:: ruby

    gem 'mongoid', '~> 7.0.5'

.. note::

    Mongoid 7.0.5 or higher is required to use Rails 6.0.

2. Install gem dependencies:

.. code-block:: sh

    bundle install

3. Generate the default Mongoid configuration:

.. code-block:: sh

    bin/rails g mongoid:config

This generator will create the ``config/mongoid.yml`` configuration file,
which we will use to configure our connection to the MongoDB deployment.
Note that as we are not using ActiveRecord we will not have a ``database.yml``
file.


Run MongoDB Locally
*******************

The configuration created in the previous step is suitable when
a MongoDB server is running locally. If you do not already have a
local MongoDB server, `download and install MongoDB
<https://docs.mongodb.com/manual/installation/>`_.

While the generated ``mongoid.yml`` will work without modifications,
we recommend reducing the server selection timeout for development.
With this change, the uncommented lines of ``mongoid.yml`` should look
like this:

.. code-block:: none

    development:
      clients:
        default:
          database: blog_development
          hosts:
            - localhost:27017
          options:
            server_selection_timeout: 1


Configure Mongoid
*****************

Before `configuring Mongoid <https://docs.mongodb.com/mongoid/current/tutorials/mongoid-configuration/>`_
we will first need a running cluster. If one is not currently avaiable please consider creating a
`free Atlas cluster <https://docs.mongodb.com/manual/tutorial/atlas-free-tier-setup/>`_ to get up
and running quickly.

If using an Atlas cluster, we recommend selecting the Ruby driver *2.5 or later* connection
string format, which will provide a
`connection string URI <https://docs.mongodb.com/manual/reference/connection-string>`_ in
a `MONGODB+SRV <https://www.mongodb.com/blog/post/mongodb-3-6-here-to-SRV-you-with-easier-replica-set-connections>`_
format which can be used in the ``mongoid.yml`` as follows:

.. code-block:: yaml

    development:
      clients:
        default:
          uri: mongodb+srv://user:pass@yourcluster.mongodb.net/blog-dev?retryWrites=true&w=majority


Creating the Post model, controller and views
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: sh

    bin/rails g scaffold Post title:string body:text

Using the standard Rails scaffolding, Mongoid can generate the necessary backing files for our blog
so that we can quickly begin creating blog posts.

.. note::

    If using Rails 6.0+, as `Webpacker <https://github.com/rails/webpacker#installation>`_ is
    enabled by default, some additional steps are require prior to starting the application server.

.. code-block:: sh

    bin/rails s

After starting our Rails server, we can navigate to http://localhost:3000/posts to see any posts
that have already been created, or to create new ones.

.. image:: rails-new-blog.png
  :alt: Screenshot of the new blog

Adding Comments to our Posts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now that our blog application is up and running, we want to introduce the ability for users to add
comments to our posts.

.. code-block:: sh

    bin/rails g scaffold Comment name:string message:string post:belongs_to

Once the scaffolding has been created we need to modify the output slightly as we want to ensure we
are maintaining a `one-to-many relationship <https://docs.mongodb.com/manual/tutorial/model-embedded-one-to-many-relationships-between-documents/>`_
between our *Post* and subsequent *Comments*:

.. code-block:: ruby
   :name: app/models/post.rb
   :caption: app/models/post.rb

    class Post
        include Mongoid::Document
        field :title, type: String
        field :body, type: String

        # add the relationship to the comments collection
        has_many :comments, dependent: :destroy
    end

.. code-block:: ruby
   :name: app/models/comment.rb
   :caption: app/models/comment.rb

    class Comment
        include Mongoid::Document
        include Mongoid::Timestamps
        field :name, type: String
        field :message, type: String

        # modify the generated relationship to identify that the
        # Comment belongs to a Post
        belongs_to :post
    end

All of the code for the views can be found in the `GitHub repository
<https://github.com/alexbevi/mongoid-demo/tree/master/rails-minimal>`_ for this project, which
includes the remaining view code for the comments.

.. image:: rails-blog-new-comment.png
  :alt: Screenshot of the blog with a new comment being added

