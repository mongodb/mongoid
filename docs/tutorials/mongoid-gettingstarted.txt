===============
Getting Started
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Creating a Blog Application with Mongoid and Ruby on Rails
----------------------------------------------------------

For this tutorial we will be creating a similar blog as to that described in the `Ruby on Rails Getting Started <https://guides.rubyonrails.org/getting_started.html#creating-the-blog-application>`_ guide, however using Mongoid instead of ActiveRecord as the database adapter.

Generating a new Rails Application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: sh

    rails new blog --skip-bundle --skip-active-record --skip-test --skip-system-test

Using the standard `Rails generator <https://guides.rubyonrails.org/generators.html>`_ with some additional parameters we can initialize our blog without an ActiveRecord backend.

``--skip-bundle``

We don't want to run ``bundle install`` as part of the new project generator as we will be modifying the ``Gemfile`` in the next section, after which we will install the bundle.

``--skip-activerecord``

`ActiveRecord <https://guides.rubyonrails.org/active_record_basics.html>`_ will not be used as we are using Mongoid as our ODM for this project.

``--skip-test``
(optional) Skip the generation of test unit files for the new project.

``--skip-system-test``
(optional) Skip generation of the system test files for the new project.

Initializing the Application with Mongoid
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. Modify the ``Gemfile`` to include a reference to the
`mongoid <https://rubygems.org/gems/mongoid/>`_ gem:

.. code-block:: ruby

    gem 'mongoid'

.. note::

    at the time of writing the latest version of the mongoid gem (7.0.4) does not support Rails
    6+. Support for this is in the ``master`` branch and can be accessed by updating the ``Gemfile``
    as follows:

    .. code-block:: ruby

        gem 'mongoid', '~> 7.0.5'

2. Install the ``Gemfile``

.. code-block:: sh

    bundle install

3. Generate the Mongoid configuration

.. code-block:: sh

    rails g mongoid:config

This generator will create the `config/mongoid.yml` configuration file, which we will use to
configure our connection to the cluster. Note that as we are not using ActiveRecord we do not have
a ``database.yml`` file.

.. note:: the ``mongoid`` 7.0.5+ gem is required to use the generator with Rails 6.0+

Configuring Mongoid
~~~~~~~~~~~~~~~~~~~

Before `configuring Mongoid <https://docs.mongodb.com/mongoid/current/tutorials/mongoid-configuration/>`_
we will first need a running cluster. If one is not currently avaiable please consider creating a
`free Atlas cluster <https://docs.mongodb.com/manual/tutorial/atlas-free-tier-setup/>`_ to get up
and running quickly.

If using an Atlas cluster, we recommend selecting the Ruby driver *2.5 or later* connection
string format, which will provide a
`connection string URI <https://docs.mongodb.com/manual/reference/connection-string>`_ in
a `MONGODB+SRV <https://www.mongodb.com/blog/post/mongodb-3-6-here-to-SRV-you-with-easier-replica-set-connections>`_
format which can be used in the ``mongoid.yml`` as follows:

.. code-block:: yaml

    development:
      clients:
        default:
          uri: mongodb+srv://user:pass@yourcluster.mongodb.net/blog?retryWrites=true&w=majority


Creating the Post model, controller and views
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: sh

    rails g scaffold Post title:string body:text

Using the standard Rails scaffolding, Mongoid can generate the necessary backing files for our blog
so that we can quickly begin creating blog posts.

.. note::

    If using Rails 6.0+, as `Webpacker <https://github.com/rails/webpacker#installation>`_ is
    enabled by default, some additional steps are require prior to starting the application server.

.. code-block:: sh

    bundle exec rails s

After starting our Rails server, we can navigate to http://localhost:3000/posts to see any posts
that have already been created, or to create new ones.

.. image:: rails-new-blog.png
  :alt: Screenshot of the new blog

Adding Comments to our Posts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now that our blog application is up and running, we want to introduce the ability for users to add
comments to our posts.

.. code-block:: sh

    rails g scaffold Comment name:string message:string post:belongs_to

Once the scaffolding has been created we need to modify the output slightly as we want to ensure we
are maintaining a `one-to-many relationship <https://docs.mongodb.com/manual/tutorial/model-embedded-one-to-many-relationships-between-documents/>`_
between our *Post* and subsequent *Comments*:

.. code-block:: ruby
   :name: app/models/post.rb
   :caption: app/models/post.rb

    class Post
        include Mongoid::Document
        field :title, type: String
        field :body, type: String

        # add the relationship to the comments collection
        has_many :comments, dependent: :destroy
    end

.. code-block:: ruby
   :name: app/models/post.rb
   :caption: app/models/post.rb

    class Comment
        include Mongoid::Document
        include Mongoid::Timestamps
        field :name, type: String
        field :message, type: String

        # modify the generated relationship to identify that the
        # Comment belongs to a Post
        belongs_to :post
    end

All of the code for the views can be found in the `GitHub repository
<https://github.com/alexbevi/mongoid-demo/tree/master/rails-minimal>`_ for this project, which
includes the remaining view code for the comments.

.. image:: rails-blog-new-comment.png
  :alt: Screenshot of the blog with a new comment being added

