.. _code-documentation:

******************
Code Documentation
******************

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol


Code Documentation
==================

Mongoid uses its own flavor of `YARD <https://github.com/lsegal/yard>`_
for code documentation. Please note the conventions outlined in this document.


Formatting
----------

- **Line Wrapping:** Use double-space indent when wrapping lines of macros
  such as ``@param`` and ``@return``. Do not indent line wraps in the description.

  .. code-block:: ruby

    # This is the description of the method. When doing a line wrap in the
    # description, you do not need to indent the wrapped line.
    #
    # @return [ Symbol ] For macro functions, wraps must be double-space
    #   indented on the second, third, etc. lines.

- **Whitespace:** Do not use leading/trailing empty comment lines,
  or more than one consecutive empty comment line.

  .. code-block:: ruby

    # GOOD:
    # @return [ Symbol ] The return value
    def my_method

    # BAD:
    # @return [ Symbol ] The return value
    #
    def my_method

    # BAD:
    # @param [ Symbol ] foo The input value
    #
    #
    # @return [ Symbol ] The return value
    def my_method(foo)


Type Declarations
-----------------

- **Type Unions:** Use pipe ``|`` to denote a union of allowed types.

  .. code-block:: ruby

    # @param [ Symbol | String ] name Either a Symbol or a String.

- **Nested Types:** Use angle brackets ``< >`` to denote type nesting.

  .. code-block:: ruby

    # @param [ Array<Symbol> ] array An Array of symbols.

- **Hash:** Use comma ``,`` to denote the key and value types.

  .. code-block:: ruby

    # @param [ Hash<Symbol, Integer> ] hash A Hash whose keys are Symbols,
    #   and whose values are Integers.

- **Array:** Use pipe ``|`` to denote a union of allowed types.

  .. code-block:: ruby

    # @param [ Array<Symbol | String> ] array An Array whose members must
    #   be either Symbols or Strings.

- **Array:** Use comma ``,`` to denote the types of each position in a tuple.

  .. code-block:: ruby

    # @return [ Array<Symbol, Integer, Integer> ] A 3-member Array whose first
    #   element is a Symbol, and whose second and third elements are Integers.

- **Array:** Use pipe ``|`` on the top level if the inner types cannot be mixed within the Array.

  .. code-block:: ruby

    # @param [ Array<Symbol> | Array<Hash> ] array An Array containing only
    #   Symbols, or an Array containing only Hashes. The Array may not contain
    #   a mix of Symbols and Hashes.

- **Nested Types:** For clarity, use square brackets ``[ ]`` to denote nested unions
  when commas are also used.

  .. code-block:: ruby

    # @param [ Hash<Symbol, [ true | false ]> ] hash A Hash whose keys are Symbols,
    #   and whose values are boolean values.

- **Ruby Values:** Specific values may be denoted in the type using Ruby syntax.

  .. code-block:: ruby

    # @param [ :before | :after ] timing One of the Symbol values :before or :after.

- **True, False, and Nil:** Use ``true``, ``false``, and ``nil`` rather than
  ``TrueClass``, ``FalseClass``, and ``NilClass``. Do not use ``Boolean`` as a type
  since it does not exist in Ruby.

  .. code-block:: ruby

    # GOOD:
    # @param [ true | false | nil ] bool A boolean or nil value.

    # BAD:
    # @param [ TrueClass | FalseClass | NilClass ] bool A boolean or nil value.
    # @param [ Boolean ] bool A boolean value.

- **Return Self:** Specify return value ``self`` where possible.

  .. code-block:: ruby

    # @return [ self ] Returns the object itself.

- **Splat Args:** Use three-dot ellipses ``...`` in the type declaration and
  star ``*`` in the parameter name to denote a splat.

  .. code-block:: ruby

    # @param [ String... ] *items The list of items name(s) as Strings.
    def buy_groceries(*items)

- **Splat Args:** Do not use ``Array`` as the type unless each arg is actually an Array.

  .. code-block:: ruby

    # BAD:
    # @param [ Array<String> ] *items The list of items name(s) as Strings.
    def buy_groceries(*items)

    buy_groceries("Cheese", "Crackers", "Wine")

    # OK:
    # @param [ Array<String>... ] *arrays One or more arrays containing name parts.
    def set_people_names(*arrays)

    set_people_names(["Harlan", "Sanders"], ["Jane", "K", ""Doe"], ["Jim", "Beam"])

- **Splat Args:** Use comma ``,`` to denote positionality in a splat.

  .. code-block:: ruby

    # @param [ Symbol..., Hash ] *args A list of names, followed by a hash
    #   as the optional last arg.
    def say_hello(*args)

- **Keyword Arguments:** Following YARD conventions, use ``@param`` for keyword arguments,
  and specify keyword argument names as symbols.

  .. code-block:: ruby

    # @param [ String ] query The search string
    # @param [ Boolean ] :exact_match Whether to do an exact match
    # @param [ Integer ] :results_per_page Number of results
    def search(query, exact_match: false, results_per_page: 10)

- **Double Splats:** Use double-star ``**`` in the parameter name to denote a keyword arg splat
  (double splat).  Note that type does not need declared on the double-splat element,
  as it is implicitly <Symbol, Object>. Instead, define value types with ``@option``
  macro below. Note ``@option`` parameter names are symbols.

  .. code-block:: ruby

    # @param **kwargs The optional keyword argument(s).
    # @option **kwargs [ String | Array<String> ] :items The items(s) as Strings to include.
    # @option **kwargs [ Integer ] :limit An Integer denoting the limit.
    def buy_groceries(**kwargs)
